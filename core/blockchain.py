"""
Blockchain class - Qu·∫£n l√Ω chu·ªói c√°c blocks
"""
import json
from .block import Block
from .transaction import Transaction
from datetime import datetime
import config


class Blockchain:
    def __init__(self, owner_address=None):
        """
        Kh·ªüi t·∫°o blockchain v·ªõi genesis block
        
        Args:
            owner_address (str): ƒê·ªãa ch·ªâ c·ªßa owner (nh·∫≠n initial balance)
        """
        self.chain = []
        self.pending_transactions = []
        self.difficulty = config.DIFFICULTY
        self.mining_reward = config.MINING_REWARD
        self.owner_address = owner_address
        
        # T·∫°o genesis block
        self.create_genesis_block()
    
    def create_genesis_block(self):
        """T·∫°o block ƒë·∫ßu ti√™n trong blockchain v·ªõi initial balance cho owner"""
        # N·∫øu c√≥ owner, t·∫°o coinbase transaction cho initial balance
        if self.owner_address:
            genesis_transaction = Transaction(
                sender="System",
                receiver=self.owner_address,
                amount=config.INITIAL_BALANCE,
                timestamp=datetime.now().timestamp()
            )
        else:
            # Kh√¥ng c√≥ owner, t·∫°o genesis transaction th√¥ng th∆∞·ªùng
            genesis_transaction = Transaction(
                sender="Genesis",
                receiver="System",
                amount=0,
                timestamp=datetime.now().timestamp()
            )
        
        genesis_block = Block(
            index=0,
            transaction=genesis_transaction,
            previous_hash="0",
            timestamp=datetime.now().timestamp()
        )
        
        genesis_block.mine_block(self.difficulty)
        self.chain.append(genesis_block)
        
        if self.owner_address:
            print(f"Genesis block created! {self.owner_address} received {config.INITIAL_BALANCE} coins")
        else:
            print("Genesis block created!")
    
    def get_latest_block(self):
        """L·∫•y block cu·ªëi c√πng trong chain"""
        return self.chain[-1] if self.chain else None
    
    def add_transaction(self, transaction):
        """
        Th√™m giao d·ªãch v√†o pending pool (v·ªõi validation)
        
        Args:
            transaction (Transaction): Giao d·ªãch c·∫ßn th√™m
        
        Raises:
            ValueError: N·∫øu transaction kh√¥ng h·ª£p l·ªá
        """
        # Skip validation cho System transactions (genesis, mining reward)
        if transaction.sender == "System" or transaction.sender == "Genesis":
            self.pending_transactions.append(transaction)
            print(f"System transaction added to pool: {transaction}")
            return
        
        # Validate sender balance (confirmed + pending ƒë·ªÉ tr√°nh double-spending)
        confirmed = self.get_balance(transaction.sender)
        pending = self.get_pending_balance(transaction.sender)
        available = confirmed + pending
        
        if available < transaction.amount:
            raise ValueError(
                f"Insufficient balance for {transaction.sender}! "
                f"Available: {available} (Confirmed: {confirmed}, Pending: {pending}), "
                f"Required: {transaction.amount}"
            )
        
        self.pending_transactions.append(transaction)
        print(f"Transaction added to pool: {transaction}")
    
    def mine_pending_transactions(self, miner_address):
        """
        Mine t·∫•t c·∫£ giao d·ªãch pending
        
        Args:
            miner_address (str): ƒê·ªãa ch·ªâ c·ªßa miner
        
        Returns:
            Block: Block m·ªõi ƒë∆∞·ª£c mine (ho·∫∑c None n·∫øu kh√¥ng c√≥ transaction)
        """
        if not self.pending_transactions:
            print("No transactions to mine!")
            return None
        
        # L·∫•y transaction ƒë·∫ßu ti√™n (m·ªói block ch·ªâ ch·ª©a 1 transaction)
        transaction = self.pending_transactions.pop(0)
        
        # T·∫°o block m·ªõi
        new_block = Block(
            index=len(self.chain),
            transaction=transaction,
            previous_hash=self.get_latest_block().hash
        )
        
        print(f"Mining block {new_block.index}...")
        new_block.mine_block(self.difficulty)
        
        # Th√™m block v√†o chain
        self.chain.append(new_block)
        
        # ‚úÖ FIX: T·∫°o mining reward transaction v√† MINE NGAY trong block ti·∫øp theo
        # Thay v√¨ add v√†o pending (g√¢y v√≤ng l·∫∑p), ta s·∫Ω t·∫°o block reward ri√™ng
        # Nh∆∞ng ƒë·ªÉ ƒë∆°n gi·∫£n, ta ADD v√†o pending nh∆∞ng CH·ªà khi c√≥ transaction th·∫≠t
        # Reward ch·ªâ ƒë∆∞·ª£c claim khi mine block c√≥ transaction c·ªßa user
        
        # Ch·ªâ th√™m reward n·∫øu transaction KH√îNG ph·∫£i t·ª´ System (tr√°nh reward cho reward)
        if transaction.sender != "System" and transaction.sender != "Genesis":
            reward_transaction = Transaction(
                sender="System",
                receiver=miner_address,
                amount=self.mining_reward
            )
            self.pending_transactions.append(reward_transaction)
            print(f"üí∞ Mining reward of {self.mining_reward} coins added to pending pool")
        
        print(f"Block {new_block.index} mined successfully!")
        return new_block
    
    def is_chain_valid(self):
        """
        Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa blockchain
        
        Returns:
            bool: True n·∫øu chain h·ª£p l·ªá, False n·∫øu kh√¥ng
        """
        for i in range(1, len(self.chain)):
            current_block = self.chain[i]
            previous_block = self.chain[i - 1]
            
            # Ki·ªÉm tra hash c·ªßa block hi·ªán t·∫°i
            if current_block.hash != current_block.calculate_hash():
                print(f"Block {i} has invalid hash!")
                return False
            
            # Ki·ªÉm tra li√™n k·∫øt v·ªõi block tr∆∞·ªõc
            if current_block.previous_hash != previous_block.hash:
                print(f"Block {i} has invalid previous_hash!")
                return False
            
            # Ki·ªÉm tra Proof of Work
            if not current_block.hash.startswith('0' * self.difficulty):
                print(f"Block {i} doesn't meet difficulty requirement!")
                return False
        
        return True
    
    def replace_chain(self, new_chain):
        """
        Thay th·∫ø chain hi·ªán t·∫°i b·∫±ng chain m·ªõi (n·∫øu h·ª£p l·ªá v√† d√†i h∆°n)
        
        Args:
            new_chain (list): Chain m·ªõi
        
        Returns:
            bool: True n·∫øu chain ƒë∆∞·ª£c thay th·∫ø, False n·∫øu kh√¥ng
        """
        if len(new_chain) <= len(self.chain):
            return False
        
        # T·∫°o blockchain t·∫°m ƒë·ªÉ validate
        temp_blockchain = Blockchain()
        temp_blockchain.chain = [Block.from_dict(block) for block in new_chain]
        
        if not temp_blockchain.is_chain_valid():
            print("Received chain is invalid!")
            return False
        
        print("Replacing chain with longer valid chain...")
        self.chain = temp_blockchain.chain
        return True
    
    def get_balance(self, address):
        """
        T√≠nh s·ªë d∆∞ c·ªßa m·ªôt ƒë·ªãa ch·ªâ (CH·ªà t·ª´ confirmed transactions trong chain)
        
        Args:
            address (str): ƒê·ªãa ch·ªâ c·∫ßn ki·ªÉm tra
        
        Returns:
            float: S·ªë d∆∞ confirmed
        """
        balance = 0
        
        # Duy·ªát qua t·∫•t c·∫£ blocks trong chain (ch·ªâ confirmed transactions)
        for block in self.chain:
            if block.transaction:
                if block.transaction.sender == address:
                    balance -= block.transaction.amount
                if block.transaction.receiver == address:
                    balance += block.transaction.amount
        
        # KH√îNG t√≠nh pending transactions (ch∆∞a confirmed)
        # Pending transactions ch·ªâ ƒë∆∞·ª£c t√≠nh sau khi mine th√†nh c√¥ng
        
        return balance
    
    def get_pending_balance(self, address):
        """
        T√≠nh s·ªë d∆∞ pending (ch∆∞a confirmed) c·ªßa m·ªôt ƒë·ªãa ch·ªâ
        
        Args:
            address (str): ƒê·ªãa ch·ªâ c·∫ßn ki·ªÉm tra
        
        Returns:
            float: S·ªë d∆∞ pending
        """
        pending_balance = 0
        
        for tx in self.pending_transactions:
            if tx.sender == address:
                pending_balance -= tx.amount
            if tx.receiver == address:
                pending_balance += tx.amount
        
        return pending_balance
    
    def get_total_balance(self, address):
        """
        T√≠nh t·ªïng s·ªë d∆∞ (confirmed + pending) c·ªßa m·ªôt ƒë·ªãa ch·ªâ
        
        Args:
            address (str): ƒê·ªãa ch·ªâ c·∫ßn ki·ªÉm tra
        
        Returns:
            tuple: (confirmed_balance, pending_balance, total_balance)
        """
        confirmed = self.get_balance(address)
        pending = self.get_pending_balance(address)
        total = confirmed + pending
        
        return confirmed, pending, total
    
    def to_json(self):
        """Chuy·ªÉn blockchain th√†nh JSON string"""
        chain_data = [block.to_dict() for block in self.chain]
        return json.dumps(chain_data, indent=2)
    
    def to_list(self):
        """Chuy·ªÉn blockchain th√†nh list of dicts"""
        return [block.to_dict() for block in self.chain]
    
    @staticmethod
    def from_list(chain_data, owner_address=None):
        """
        T·∫°o Blockchain t·ª´ list of dicts
        
        Args:
            chain_data (list): Danh s√°ch c√°c block d∆∞·ªõi d·∫°ng dict
            owner_address (str): ƒê·ªãa ch·ªâ owner (optional)
        
        Returns:
            Blockchain: Blockchain object
        """
        # T·∫°o blockchain m·ªõi nh∆∞ng kh√¥ng t·∫°o genesis block
        blockchain = Blockchain.__new__(Blockchain)
        blockchain.chain = []
        blockchain.pending_transactions = []
        blockchain.difficulty = config.DIFFICULTY
        blockchain.mining_reward = config.MINING_REWARD
        blockchain.owner_address = owner_address
        
        # Load c√°c blocks t·ª´ data
        for block_data in chain_data:
            block = Block.from_dict(block_data)
            blockchain.chain.append(block)
        
        return blockchain
    
    def display_chain(self):
        """Hi·ªÉn th·ªã to√†n b·ªô blockchain"""
        print("\n" + "="*80)
        print(f"BLOCKCHAIN (Length: {len(self.chain)}, Difficulty: {self.difficulty})")
        print("="*80)
        
        for block in self.chain:
            print(f"\nBlock #{block.index}")
            print(f"  Timestamp: {datetime.fromtimestamp(block.timestamp)}")
            print(f"  Previous Hash: {block.previous_hash}")
            print(f"  Hash: {block.hash}")
            print(f"  Nonce: {block.nonce}")
            if block.transaction:
                print(f"  Transaction: {block.transaction}")
        
        print("\n" + "="*80)
        print(f"Chain is valid: {self.is_chain_valid()}")
        print(f"Pending transactions: {len(self.pending_transactions)}")
        print("="*80 + "\n")
