"""
Network Manager - Qu·∫£n l√Ω danh s√°ch t·∫•t c·∫£ nodes trong m·∫°ng
"""
import json
import os
import config


class NetworkManager:
    def __init__(self):
        """Kh·ªüi t·∫°o Network Manager"""
        self.network_file = config.NETWORK_FILE
        self.nodes = self.load_network()
    
    def load_network(self):
        """
        Load danh s√°ch nodes t·ª´ file
        
        Returns:
            dict: Dictionary v·ªõi key l√† node_id, value l√† node info
        """
        if not os.path.exists(self.network_file):
            return {}
        
        try:
            with open(self.network_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except:
            return {}
    
    def save_network(self):
        """L∆∞u danh s√°ch nodes v√†o file"""
        with open(self.network_file, 'w', encoding='utf-8') as f:
            json.dump(self.nodes, f, indent=2, ensure_ascii=False)
    
    def register_node(self, node_id, host, port, username):
        """
        ƒêƒÉng k√Ω node m·ªõi v√†o m·∫°ng
        
        Args:
            node_id (str): ID c·ªßa node
            host (str): Host address
            port (int): Port number
            username (str): T√™n ng∆∞·ªùi d√πng
        """
        # Reload t·ª´ file ƒë·ªÉ ƒë·∫£m b·∫£o d·ªØ li·ªáu m·ªõi nh·∫•t
        self.nodes = self.load_network()
        
        # Ki·ªÉm tra v√† x√≥a nodes c≈© c·ªßa c√πng username ho·∫∑c c√πng port
        nodes_to_remove = []
        for existing_id, existing_node in self.nodes.items():
            if existing_node['username'] == username and existing_id != node_id:
                nodes_to_remove.append(existing_id)
                print(f"‚ö†Ô∏è Found duplicate username node: {existing_id[:8]}..., will remove")
            elif existing_node['port'] == port and existing_id != node_id:
                nodes_to_remove.append(existing_id)
                print(f"‚ö†Ô∏è Found duplicate port node: {existing_id[:8]}..., will remove")
        
        # X√≥a c√°c nodes tr√πng l·∫∑p
        for old_id in nodes_to_remove:
            self.unregister_node(old_id)
        
        # ƒêƒÉng k√Ω node m·ªõi
        self.nodes[node_id] = {
            'node_id': node_id,
            'host': host,
            'port': port,
            'username': username,
            'url': f"http://{host}:{port}",
            'is_active': True
        }
        self.save_network()
        print(f"Node {node_id[:8]}... registered to network")
    
    def unregister_node(self, node_id):
        """
        X√≥a node kh·ªèi m·∫°ng
        
        Args:
            node_id (str): ID c·ªßa node
        """
        # Reload t·ª´ file ƒë·ªÉ ƒë·∫£m b·∫£o d·ªØ li·ªáu m·ªõi nh·∫•t
        self.nodes = self.load_network()
        
        if node_id in self.nodes:
            del self.nodes[node_id]
            self.save_network()
            print(f"Node {node_id} unregistered from network")
    
    def get_node(self, node_id):
        """
        L·∫•y th√¥ng tin m·ªôt node
        
        Args:
            node_id (str): ID c·ªßa node
        
        Returns:
            dict: Th√¥ng tin node
        """
        # Reload t·ª´ file ƒë·ªÉ ƒë·∫£m b·∫£o d·ªØ li·ªáu m·ªõi nh·∫•t
        self.nodes = self.load_network()
        return self.nodes.get(node_id)
    
    def get_all_nodes(self):
        """
        L·∫•y danh s√°ch t·∫•t c·∫£ nodes
        
        Returns:
            list: Danh s√°ch nodes
        """
        # Reload t·ª´ file ƒë·ªÉ ƒë·∫£m b·∫£o d·ªØ li·ªáu m·ªõi nh·∫•t
        self.nodes = self.load_network()
        return list(self.nodes.values())
    
    def get_active_nodes(self):
        """
        L·∫•y danh s√°ch nodes ƒëang ho·∫°t ƒë·ªông
        
        Returns:
            list: Danh s√°ch active nodes
        """
        # Reload t·ª´ file ƒë·ªÉ ƒë·∫£m b·∫£o d·ªØ li·ªáu m·ªõi nh·∫•t
        self.nodes = self.load_network()
        return [node for node in self.nodes.values() if node.get('is_active', True)]
    
    def get_random_nodes(self, count, exclude_ids=None):
        """
        L·∫•y ng·∫´u nhi√™n m·ªôt s·ªë nodes
        
        Args:
            count (int): S·ªë l∆∞·ª£ng nodes c·∫ßn l·∫•y
            exclude_ids (list): Danh s√°ch node_id kh√¥ng mu·ªën l·∫•y
        
        Returns:
            list: Danh s√°ch nodes ng·∫´u nhi√™n
        """
        import random
        
        exclude_ids = exclude_ids or []
        available_nodes = [
            node for node in self.get_active_nodes()
            if node['node_id'] not in exclude_ids
        ]
        
        count = min(count, len(available_nodes))
        return random.sample(available_nodes, count)
    
    def mark_node_inactive(self, node_id):
        """
        ƒê√°nh d·∫•u node l√† kh√¥ng ho·∫°t ƒë·ªông
        
        Args:
            node_id (str): ID c·ªßa node
        """
        # Reload t·ª´ file ƒë·ªÉ ƒë·∫£m b·∫£o d·ªØ li·ªáu m·ªõi nh·∫•t
        self.nodes = self.load_network()
        
        if node_id in self.nodes:
            self.nodes[node_id]['is_active'] = False
            self.save_network()
    
    def mark_node_active(self, node_id):
        """
        ƒê√°nh d·∫•u node l√† ƒëang ho·∫°t ƒë·ªông
        
        Args:
            node_id (str): ID c·ªßa node
        """
        # Reload t·ª´ file ƒë·ªÉ ƒë·∫£m b·∫£o d·ªØ li·ªáu m·ªõi nh·∫•t
        self.nodes = self.load_network()
        
        if node_id in self.nodes:
            self.nodes[node_id]['is_active'] = True
            self.save_network()
    
    def get_network_size(self):
        """
        L·∫•y s·ªë l∆∞·ª£ng nodes trong m·∫°ng
        
        Returns:
            int: S·ªë l∆∞·ª£ng nodes
        """
        # Reload t·ª´ file ƒë·ªÉ ƒë·∫£m b·∫£o d·ªØ li·ªáu m·ªõi nh·∫•t
        self.nodes = self.load_network()
        return len(self.nodes)
    
    def display_network(self):
        """Hi·ªÉn th·ªã th√¥ng tin m·∫°ng"""
        # Reload t·ª´ file ƒë·ªÉ ƒë·∫£m b·∫£o d·ªØ li·ªáu m·ªõi nh·∫•t
        self.nodes = self.load_network()
        
        print("\n" + "="*80)
        print(f"NETWORK STATUS (Total Nodes: {self.get_network_size()})")
        print("="*80)
        
        for node in self.get_all_nodes():
            status = "üü¢ ACTIVE" if node.get('is_active', True) else "üî¥ INACTIVE"
            print(f"\n{status} {node['username']} ({node['node_id']})")
            print(f"  URL: {node['url']}")
        
        print("\n" + "="*80 + "\n")
